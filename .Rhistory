# 4. recall modelyr ~ Normal(muMY, varMY)
# prior: muMY ~ Normal(meanMuMY, varMuMY)
meanMuMY <- -0.2647101
varMuMY <- .001
# prior: varMY ~ InverseGamma(shapeVarMY, rateVarMY)
# https://stats.stackexchange.com/questions/241891/prior-elicitation-with-inverse-gamma-and-parametrization-issue
shapeVarMY <- 200
rateVarMY <- 5970
# 5. recall dvc ~ logNormal(muLogDVC, varLogDVC)
# prior: muLogDVC ~ normal(meanMuLogDVC, varMuLogDVC)
meanMuLogDVC <- 4
varMuLogDVC <- .001
# prior: varLogDVC ~ InverseGamma(shapeVarLogDVC, rateVarLogDVC)
shapeVarLogDVC <- 15
rateVarLogDVC <- 5600
#########
# BETA #
#########
# prior: intercept ~ Normal(meanIntercept, varIntercept)
meanIntercept <- -5
varIntercept <- 3
# prior: ageCoeff ~ Normal(meanAgeCoeff, varAgeCoeff)
meanAgeCoeff <- .02
varAgeCoeff <- .02
# prior: sexCoeff ~ Normal(meanSexCoeff, varSexCoeff)
meanSexCoeff <- -.5
varSexCoeff <- .4
# prior: bmiCoeff ~ Normal(meanBMICoeff, varBMICoeff)
meanBMICoeff <- 0
varBMICoeff <- .05
# prior: logdvtCoeff ~ Normal(meanLDVTCoeff, varLDVTCoeff)
meanLDVTCoeff <- .07 # note: different than Tim's
varLDVTCoeff <- .03
# prior: kbdplyCoeff ~ Normal(meankbdplyCoeff, varkbdplyCoeff)
meankbdplyCoeff <- 0
varkbdplyCoeff <- .5
# prior: suvCoeff ~ Normal(meansuvCoeff, varsuvCoeff)
meansuvCoeff <- 0
varsuvCoeff <- .3
# prior: truckCoeff ~ Normal(meantruckCoeff, vartruckCoeff)
meantruckCoeff <- 0
vartruckCoeff <- .3
# prior: vanCoeff ~ Normal(meanvanCoeff, varvanCoeff)
meanvanCoeff <- 0
varvanCoeff <- .3
# prior: psuCoeff ~ Normal(meanpsuCoeff, varpsuCoeff)
meanpsuCoeff <- 2
varpsuCoeff <- 1
# prior: modelyearCoeff ~ Normal(meanmyCoeff, varmyCoeff)
meanmyCoeff <- 0
varmyCoeff <- .1
# prior: farsideCoeff ~ Normal(meanfarsideCoeff, varfarsideCoeff)
meanfarsideCoeff <- 0
varfarsideCoeff <- .2
# prior: nearsideCoeff ~ Normal(meannearsideCoeff, varnearsideCoeff)
meannearsideCoeff <- .2
varnearsideCoeff <- .2
}
# calculates the prior for the alpha parameters (govern missing data)
# and the beta parametrs (regression coefficients)
logPrior <- function(alpha, beta){
# alpha is:
# (p, muBMI, varBMI, skewBMI, intLDVT, slopeLDVT, varLDVT, muMY, varMY, muLogDVC, varLogDVC)
logAlphaPrior <-
# prior: p ~ Beta(shape1P, shape2P)
dbeta(x = alpha[1], shape1 = shape1P, shape2 = shape2P, log = TRUE) +
# prior: muBMI sim Normal(meanMuBMI, varMuBMI)
dnorm(x = alpha[2], mean = meanMuBMI, sd = sqrt(varMuBMI), log = TRUE) +
# prior: varBMI sim LogNormal(meanLogVar, varLogVar)
dlnorm(x = alpha[3], meanlog = meanLogVar, sdlog = sqrt(varLogVar), log = TRUE) +
# prior: skewBMI sim InverseGamma(shapeSkew, rateSkew)
dinvgamma(x = alpha[4], shape=shapeSkew, rate = rateSkew, log = TRUE) +
# prior: intLDVT ~ Normal(meanIntLDVT, varintLDVT)
dnorm(x = alpha[5], mean = meanIntLDVT, sd = sqrt(varintLDVT), log = TRUE) +
# prior: slopeLDVT ~ Normal(meanSlope1LDVT, varSlope1LDVT)
dnorm(x = alpha[6], mean = meanSlope1LDVT, sd = sqrt(varSlope1LDVT), log = TRUE) +
# prior: varLDVT ~ InverseGamma(shapeVarLDVT, rateVarLDVT)
dinvgamma(x = alpha[7], shape=shapeVarLDVT, rate = rateVarLDVT, log = TRUE) +
# prior: muMY ~ Normal(meanMuMY, varMuMY)
dnorm(x = alpha[8], mean = meanMuMY, sd = sqrt(varMuMY), log = TRUE) +
# prior: varMY ~ InverseGamma(shapeVarMY, rateVarMY)
dinvgamma(x = alpha[9], shape=shapeVarMY, rate = rateVarMY, log = TRUE) +
# prior: muLogDVC ~ normal(meanMuLogDVC, varMuLogDVC)
dnorm(x = alpha[10], mean = meanMuLogDVC, sd = sqrt(varMuLogDVC), log = TRUE) +
# prior: varLogDVC ~ InverseGamma(shapeVarLogDVC, rateVarLogDVC)
dinvgamma(x = alpha[11], shape=shapeVarLogDVC, rate = rateVarLogDVC, log = TRUE)
logBetaPrior <-
# prior: intercept ~ Normal(meanIntercept, varIntercept)
dnorm(x = beta[1], mean = meanIntercept, sd = sqrt(varIntercept), log = TRUE) +
# prior: ageCoeff ~ Normal(meanAgeCoeff, varAgeCoeff)
dnorm(x = beta[2], mean = meanAgeCoeff, sd = sqrt(varAgeCoeff), log = TRUE) +
# prior: sexCoeff ~ Normal(meanSexCoeff, varSexCoeff)
dnorm(x = beta[3], mean = meanSexCoeff, sd = sqrt(varSexCoeff), log = TRUE) +
# prior: bmiCoeff ~ Normal(meanBMICoeff, varBMICoeff)
dnorm(x = beta[4], mean = meanBMICoeff, sd = sqrt(varBMICoeff), log = TRUE) +
# prior: logdvtCoeff ~ Normal(meanLDVTCoeff, varLDVTCoeff)
dnorm(x = beta[5], mean = meanLDVTCoeff, sd = sqrt(varLDVTCoeff), log = TRUE) +
# prior: kbdplyCoeff ~ Normal(meankbdplyCoeff, varkbdplyCoeff)
dnorm(x = beta[6], mean = meankbdplyCoeff, sd = sqrt(varkbdplyCoeff), log = TRUE) +
# prior: suvCoeff ~ Normal(meansuvCoeff, varsuvCoeff)
dnorm(x = beta[7], mean = meansuvCoeff, sd = sqrt(varsuvCoeff), log = TRUE) +
# prior: truckCoeff ~ Normal(meantruckCoeff, vartruckCoeff)
dnorm(x = beta[8], mean = meantruckCoeff, sd = sqrt(vartruckCoeff), log = TRUE) +
# prior: vanCoeff ~ Normal(meanvanCoeff, varvanCoeff)
dnorm(x = beta[9], mean = meanvanCoeff, sd = sqrt(varvanCoeff), log = TRUE) +
# prior: psuCoeff ~ Normal(meanpsuCoeff, varpsuCoeff)
dnorm(x = beta[10], mean = meanpsuCoeff, sd = sqrt(varpsuCoeff), log = TRUE) +
# prior: modelyearCoeff ~ Normal(meanmyCoeff, varmyCoeff)
dnorm(x = beta[11], mean = meanmyCoeff, sd = sqrt(varmyCoeff), log = TRUE) +
# prior: farsideCoeff ~ Normal(meanfarsideCoeff, varfarsideCoeff)
dnorm(x = beta[12], mean = meanfarsideCoeff, sd = sqrt(varfarsideCoeff), log = TRUE) +
# prior: nearsideCoeff ~ Normal(meannearsideCoeff, varnearsideCoeff)
dnorm(x = beta[13], mean = meannearsideCoeff, sd = sqrt(varnearsideCoeff), log = TRUE)
return(logAlphaPrior + logBetaPrior)
}
# log q(x_{mis} | x_{obs}, y)
propose_missdata_given_params <- function(y, sds){
sex <- rbinom(n = numMissingEachGroup[1], size=1, .5)
bmi <- rt.scaled(n = numMissingEachGroup[2], df = 2, mean = 20, sd = sds[1])
modelyr <- rt.scaled(n = numMissingEachGroup[4], df = 20, mean = 0, sd = sds[2])
dvc <- rlnorm(n = numMissingEachGroup[5], meanlog = 4)
ldvt <- rt.scaled(n=numMissingEachGroup[3], df = 20, mean = 3, sd = sds[3])
return(list(sex = sex, bmi = bmi, ldvt = ldvt, modelyr = modelyr, dvc = dvc))
}
# log q(x_{mis} | x_{obs}, y)
logMissingDataProposal <- function(sex, bmi, ldvt, modelyr, dvc, sds){
ans <- sum(dbinom(x = sex, size = 1, prob = .5, log = T))
ans <- ans + sum(dt.scaled(x = bmi, df = 2, mean = 20, sd = sds[1], log = T))
ans <- ans + sum(dlnorm(x = dvc, meanlog = 4, log = T))
ans <- ans + sum(dt.scaled(x = modelyr, df = 2, mean = 20, sd = sds[2], log = T))
ans <- ans + sum(dt.scaled(x = ldvt, df = 20, mean = 3, sd = sds[3], log = T))
return(ans)
}
# full model matrix columns are as follows:
# intercept, age, sex1, height, weight, seatpos13, seatpos21, sseatpos22, seatpos23, dvtotal
# the argument here is assumed to be a list of vectors
logCondLikes <- function(sex, bmi, ldvt, modelyr, beta, y){
# insert simulated data into missing data spots
Xdf$sex1[is.na(Xdf$sex1)] <- sex
Xdf$bmi[is.na(Xdf$bmi)] <- bmi
Xdf$logdvtotal[is.na(Xdf$logdvtotal)] <- ldvt
Xdf$modelyr[is.na(Xdf$modelyr)] <- modelyr
stopifnot(sum(is.na(Xdf[,-14]))==0)
# evaluate cond likelihoods
# exclude dvc (col 14) as predictor
# assumes y is either 0 or 1
linked_means <- as.matrix(Xdf[,-14]) %*% as.matrix(beta)
sum(
mapply(function(y,xiTransposeTimesBeta){ -logSumExp(c(0, (1-2*y)*xiTransposeTimesBeta)) },
y, # the entire vector of all y data
linked_means[,1]))
}
# log p(m | y, x_obs, x_mis, phi)
# TODO change this to reflect accurate formula
logMissingProbs <- function(sex, bmi, ldvt, modelyr, beta, y){
rep(log(.5), length(y))
}
# log p(x_{mis} | x_{obs}, alpha)
logMissingDataProbs <- function(sex, bmi, ldvt, modelyr, dvc, alpha){
# alpha ordering is:
# (p, muBMI, varBMI, skewBMI, intLDVT, slopeLDVT,
#   varLDVT, muMY, varMY, muLogDVC, varLogDVC)
# 1. recall missing sex1 ~ Bern(alpha[1])
ans <- sum(dbinom(x = sex, size=1, prob = alpha[1], log = T))
# 2. recall bmi ~ skew-normal(alpha[2], alpha[3], alpha[4])
ans <- ans + sum(dsn(x = bmi, xi = alpha[2], omega = sqrt(alpha[3]), alpha = alpha[4], log = T))
# 4. recall modelyr ~ Normal(alpha[9], alpha[10])
ans <- ans + sum(dnorm(x = modelyr, mean = alpha[8], sd = sqrt(alpha[9]), log = T))
# 5. recall dvc ~ logNormal(alpha[11], alpha[12])
ans <- ans + sum(dlnorm(x = dvc, alpha[10], sdlog = sqrt(alpha[11]), log = T))
# 3. recall log dvtotal ~ N(alpha[5] + alpha[6]*dvc + alpha[7]*dvc^2, alpha[8])
# construct imputed dvc
imputedDVC <- X[,colnames(X) == "dvc"]
imputedDVC[is.na(imputedDVC)] <- dvc
ldvtRows <- is.na(X[,colnames(X) == "logdvtotal"])
ldvtPred <- imputedDVC[ldvtRows]
meanVec <- alpha[5] + alpha[6]*ldvtPred #+ alpha[7]*(ldvtPred^2)
ans <- ans + sum(dnorm(x = ldvt, mean = meanVec, sd = sqrt(alpha[7]), log = T))
return(ans)
}
# log p(m|y, xmis, xobs, phi) + log p(y|xmis,xobs,beta) + log p(xmis|xobs,alpha) - log q(xmis|xobs,y,alpha,beta)
getOneLogSummand <- function(alpha, beta, y, sds){
Xmis <- propose_missdata_given_params(y, sds)
logLikes <- logCondLikes(sex=Xmis$sex,
bmi=Xmis$bmi,
ldvt=Xmis$ldvt,
modelyr=Xmis$modelyr,
beta=beta,
y=y)
logpmweights <- logMissingProbs(sex=Xmis$sex,
bmi=Xmis$bmi,
ldvt=Xmis$ldvt,
modelyr=Xmis$modelyr,
beta=beta,
y=y)
logMissXProbs <- logMissingDataProbs(sex = Xmis$sex,
bmi = Xmis$bmi,
ldvt = Xmis$ldvt,
modelyr = Xmis$modelyr,
dvc = Xmis$dvc,
alpha = alpha)
logQs <- logMissingDataProposal(sex = Xmis$sex,
bmi = Xmis$bmi,
ldvt = Xmis$ldvt,
modelyr = Xmis$modelyr,
dvc = Xmis$dvc,
sds = sds)
sum(logLikes+logpmweights+logMissXProbs-logQs)
}
# TODO: make parallel
getLogImpSampEst <- function(alphaVec, betaVec, y, sds, N=100, logsumexp=TRUE){
# assumes importance distribution is the missing data distribution
samps <- replicate(N, getOneLogSummand(alphaVec, betaVec, y, sds))
logSumExp(samps-log(N))
# if(logsumexp){
#   m <- max(samps, na.rm = T)
#   ans <- log(sum(exp(samps - m))) + m - log(N)
#
#   if(!is.nan(ans)){
#     ans
#   }else if(is.nan(ans) & any(is.infinite(samps))){
#     # the NaN is because you had all -Infs in LogCondLike
#     # this means the max is -Inf, and you end up calculating
#     # because -inf - (-inf) when doing "samps - m"
#     # if this is true then you should return -Inf.
#     cat("generating -Inf\n")
#     -Inf
#   }else{
#     stop("NaN generated in an unanticipated way!\n")
#   }
#
# }else{ #not using the log-sum-exp trick
#   log(mean(exp(samps)))
# }
}
# set up the tuning parameters for the proposal
d <- ncol(X) + numAlpha
alphaQCovMat <- .1*diag(numAlpha) * (2.4^2)/d
head(X)
library(invgamma)
library(matrixStats)
# get some data
source("~/pmglm/code/sim_fake_data.r")
numRows <- 100
betas <- c(1, -2, 3)
alpha <- 1
phis <- c(1, 1, 1)
fake_data <- sim_data(nrow = numRows, beta_coeffs = betas, alpha_coeffs = alpha, phi_coeffs = phis)
y <- fake_data$y
X <- fake_data$X
M <- fake_data$M
X[M == 0] <- NA
mis <- is.na(X)
numColsWithMiss <- sum(colSums(mis) != 0)
numMissingEachGroup <- colSums(mis)[colSums(mis) != 0]
# define prior
logPrior <- function(alpha, beta, phi){
logAlphaPrior <- invgamma::dinvgamma(alpha, shape = .001, rate = .001, log = T)
logBetaPrior <- sum(dnorm(betas, 0, 3, log = T))
logPhiPrior <- sum(dnorm(phi, 0, 3, log = T))
logAlphaPrior + logBetaPrior + logPhiPrior
}
# sample q(x_{mis} | x_{obs}, y)
propose_missdata_given_params <- function(y){
list(x2mis = rt(numMissingEachGroup, df = 3))
}
# eval log q(x_{mis} | x_{obs}, y)
logMissingDataProposal <- function(x2mis){
sum(dt(x = x2mis, df = 3, log = T))
}
logCondLikes <- function(xmis, beta){
# insert simulated data into missing data spots
X[is.na(X[,2])] <- xmis
X <- cbind(rep(1,numRows), X)
stopifnot(sum(is.na(X))==0)
linked_means <- as.vector(X %*% as.matrix(beta))
logLogisticRegCndtlLike(y, linked_means)
}
logMissingProbs <- function(M, xmis, phis){
X[is.na(X[,2])] <- xmis
X <- cbind(rep(1,numRows), X)
stopifnot(is.matrix(M))
stopifnot(dim(M)[1] == numRows)
stopifnot(dim(M)[2] == 2)
stopifnot(sum(is.na(X))==0)
linked_means <- as.vector(X %*% as.matrix(phis))
logLogisticRegCndtlLike(M[,2], linked_means)
}
logMissingDataProbs <- function(xmis, alpha){
sum(dnorm(xmis, 0, sd = sqrt(alpha), log = T))
}
# log p(m|y, xmis, xobs, phi) + log p(y|xmis,xobs,beta) + log p(xmis|xobs,alpha) - log q(xmis|xobs,y,alpha,beta)
getOneLogSummand <- function(alpha, beta, phis, y){
Xmis <- propose_missdata_given_params(y)
logLikes <- logCondLikes(Xmis$x2mis, beta)
logpmweights <- logMissingProbs(M, Xmis$x2mis, phis)
logMissXProbs <- logMissingDataProbs(Xmis$x2mis, alpha)
logQs <- logMissingDataProposal(Xmis$x2mis)
sum(logLikes+logpmweights+logMissXProbs-logQs)
}
getLogImpSampEst <- function(alphaVec, betaVec, phiVec, sds, N=100, logsumexp=TRUE){
# assumes importance distribution is the missing data distribution
samps <- replicate(N, getOneLogSummand(alphaVec, betaVec, phiVec, y))
logSumExp(samps-log(N))
}
# set up the tuning parameters for the proposal
numBetas <- ncol(X) + 1
numAlphas <- 1
numPhis <- numBetas
d <- numBetas + numAlphas + numPhis
alphaQCovMat <- .1*diag(numAlphas) * (2.4^2)/d
betaQCovMat <- .1*diag(numBetas) * (2.4^2)/d
?mvrnorm
# multivariate normal random walk and then transform to original space
qSim <- function(oldAlpha, oldBeta, oldPhi){
# sample alphas
newAlpha <- getAlpha(rnorm(n = 1, mean = transAlpha(oldAlpha), sd = sqrt(alphaQCovMat)))
# sample betas
newBeta <- mvrnorm(n=1,
mu=oldBeta,
Sigma = betaQCovMat)
newPhis <- mvrnorm(n = 1,
mu = oldPhi,
Sigma = phiQCovMat)
# return stuff
list(alphas = newAlpha, betas = newBeta, phis = newPhis)
}
qSim(alpha, betas, phis)
transAlpha <- function(alpha){
log(alpha)
}
getAlpha <- function(transformedAlpha){
exp(transformedAlpha)
}
qSim(alpha, betas, phis)
phiQCovMat <- .1*diag(numPhis) * (2.4^2)/d
qSim(alpha, betas, phis)
# we're using random walk on the transformed space and evaluating everything
# in terms of the untransformed parameters. That's why we have the log
# Jacobians in this expression
logQEv <- function(oldAlpha, oldBeta, oldPhi, targetAlpha, targetBeta, targetPhi){
dnorm(x = transAlpha(targetAlpha),
mean = transAlpha(oldAlpha),
sd = sqrt(alphaQCovMat),
log = TRUE) - log(targetAlpha) +
dmvnorm(x = targetBeta,
mean = oldBeta,
sigma = betaQCovMat,
log = TRUE) +
dmvnorm(x = targetPhi,
mean = oldPhi,
sigma = phiQCovMat,
log = TRUE)
}
getLogRatio <- function(oldAlpha, oldBeta, oldPhi,
oldApproxLogTerm, propAlpha,
propBeta, propPhi, propApproxLogTerm){
res <- logPrior(alpha = propAlpha, beta = ppropBeta, phi = propPhi) -
logPrior(alpha = oldAlpha, beta = oldBeta, phi = oldPhi)
res <- res + propApproxLogTerm - oldApproxLogTerm
res <- res +
logQEv(oldAlpha = propAlpha,
oldBeta = propBeta,
oldPhi = propPhi) -
logQEv(targetAlpha = oldAlpha,
targetBeta = oldBeta,
targetPhi = oldPhi)
return(res)
}
library(invgamma)
library(matrixStats)
library(MASS) # mvrnorm
# get some data
source("~/pmglm/code/sim_fake_data.r")
numRows <- 100
betas <- c(1, -2, 3)
alpha <- 1
phis <- c(1, 1, 1)
fake_data <- sim_data(nrow = numRows, beta_coeffs = betas, alpha_coeffs = alpha, phi_coeffs = phis)
y <- fake_data$y
X <- fake_data$X
M <- fake_data$M
X[M == 0] <- NA
mis <- is.na(X)
numColsWithMiss <- sum(colSums(mis) != 0)
numMissingEachGroup <- colSums(mis)[colSums(mis) != 0]
# define prior
logPrior <- function(alpha, beta, phi){
logAlphaPrior <- invgamma::dinvgamma(alpha, shape = .001, rate = .001, log = T)
logBetaPrior <- sum(dnorm(betas, 0, 3, log = T))
logPhiPrior <- sum(dnorm(phi, 0, 3, log = T))
logAlphaPrior + logBetaPrior + logPhiPrior
}
# sample q(x_{mis} | x_{obs}, y)
propose_missdata_given_params <- function(y){
list(x2mis = rt(numMissingEachGroup, df = 3))
}
# eval log q(x_{mis} | x_{obs}, y)
logMissingDataProposal <- function(x2mis){
sum(dt(x = x2mis, df = 3, log = T))
}
logCondLikes <- function(xmis, beta){
# insert simulated data into missing data spots
X[is.na(X[,2])] <- xmis
X <- cbind(rep(1,numRows), X)
stopifnot(sum(is.na(X))==0)
linked_means <- as.vector(X %*% as.matrix(beta))
logLogisticRegCndtlLike(y, linked_means)
}
logMissingProbs <- function(M, xmis, phis){
X[is.na(X[,2])] <- xmis
X <- cbind(rep(1,numRows), X)
stopifnot(is.matrix(M))
stopifnot(dim(M)[1] == numRows)
stopifnot(dim(M)[2] == 2)
stopifnot(sum(is.na(X))==0)
linked_means <- as.vector(X %*% as.matrix(phis))
logLogisticRegCndtlLike(M[,2], linked_means)
}
logMissingDataProbs <- function(xmis, alpha){
sum(dnorm(xmis, 0, sd = sqrt(alpha), log = T))
}
# log p(m|y, xmis, xobs, phi) + log p(y|xmis,xobs,beta) + log p(xmis|xobs,alpha) - log q(xmis|xobs,y,alpha,beta)
getOneLogSummand <- function(alpha, beta, phis, y){
Xmis <- propose_missdata_given_params(y)
logLikes <- logCondLikes(Xmis$x2mis, beta)
logpmweights <- logMissingProbs(M, Xmis$x2mis, phis)
logMissXProbs <- logMissingDataProbs(Xmis$x2mis, alpha)
logQs <- logMissingDataProposal(Xmis$x2mis)
sum(logLikes+logpmweights+logMissXProbs-logQs)
}
getLogImpSampEst <- function(alphaVec, betaVec, phiVec, N=100){
# assumes importance distribution is the missing data distribution
samps <- replicate(N, getOneLogSummand(alphaVec, betaVec, phiVec, y))
logSumExp(samps-log(N))
}
# set up the tuning parameters for the proposal
numBetas <- ncol(X) + 1
numAlphas <- 1
numPhis <- numBetas
d <- numBetas + numAlphas + numPhis
alphaQCovMat <- .1 * (2.4^2)/d
betaQCovMat <- .1*diag(numBetas) * (2.4^2)/d
phiQCovMat <- .1*diag(numPhis) * (2.4^2)/d
transAlpha <- function(alpha){
log(alpha)
}
getAlpha <- function(transformedAlpha){
exp(transformedAlpha)
}
# multivariate normal random walk and then transform to original space
qSim <- function(oldAlpha, oldBeta, oldPhi){
# sample alphas
newAlpha <- getAlpha(rnorm(n = 1, mean = transAlpha(oldAlpha), sd = sqrt(alphaQCovMat)))
# sample betas
newBeta <- mvrnorm(n=1,
mu=oldBeta,
Sigma = betaQCovMat)
newPhis <- mvrnorm(n = 1,
mu = oldPhi,
Sigma = phiQCovMat)
# return stuff
list(alphas = newAlpha, betas = newBeta, phis = newPhis)
}
# we're using random walk on the transformed space and evaluating everything
# in terms of the untransformed parameters. That's why we have the log
# Jacobians in this expression
logQEv <- function(oldAlpha, oldBeta, oldPhi, targetAlpha, targetBeta, targetPhi){
dnorm(x = transAlpha(targetAlpha),
mean = transAlpha(oldAlpha),
sd = sqrt(alphaQCovMat),
log = TRUE) - log(targetAlpha) +
dmvnorm(x = targetBeta,
mean = oldBeta,
sigma = betaQCovMat,
log = TRUE) +
dmvnorm(x = targetPhi,
mean = oldPhi,
sigma = phiQCovMat,
log = TRUE)
}
getLogRatio <- function(oldAlpha, oldBeta, oldPhi,
oldApproxLogTerm, propAlpha,
propBeta, propPhi, propApproxLogTerm){
res <- logPrior(alpha = propAlpha, beta = ppropBeta, phi = propPhi) -
logPrior(alpha = oldAlpha, beta = oldBeta, phi = oldPhi)
res <- res + propApproxLogTerm - oldApproxLogTerm
res <- res +
logQEv(oldAlpha = propAlpha,
oldBeta = propBeta,
oldPhi = propPhi) -
logQEv(targetAlpha = oldAlpha,
targetBeta = oldBeta,
targetPhi = oldPhi)
return(res)
}
getLogImpSampEst(startAlpha, startBeta, startPhi, N)
###############################################
# trial run to get approx covariance matrices #
###############################################
N <- 500
startAlpha <- 1
startBeta <- c(1,1,1)
startPhi <- c(1,1,1)
getLogImpSampEst(startAlpha, startBeta, startPhi, N)
library(mmcmc)
getLogImpSampEst(startAlpha, startBeta, startPhi, N)
document()
setwd("~/mmcmc/")
load_all()
document()
load_all()
